using System;
using System.Linq;

namespace Paya.Automation.Editor
{
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Globalization;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Security.Principal;
    using System.ServiceModel;
    using System.ServiceModel.Description;
    using System.ServiceModel.Web;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Windows;
    using System.Windows.Markup;
    using System.Windows.Media;
    using System.Windows.Threading;

    using JetBrains.Annotations;

    using MahApps.Metro.Controls;

    using Microsoft.Win32;

    using NLog;

    using Globalization;
    using Models;
    using Properties;
    using Services;

    using TaskEx = System.Threading.Tasks.Task;

    /// <summary>
    ///     Interaction logic for App.xaml
    /// </summary>
    [SuppressMessage("ReSharper", "InconsistentlySynchronizedField")]
    public partial class App
    {

        #region Static Fields



        private static readonly Logger _Logger = LogManager.GetLogger(typeof(App).Name);
        private static readonly object _SyncObject = new object();

        #endregion

        #region Fields

        private ServiceHost _serviceHost;
        private WebServiceHost _webServiceHost;

        #endregion

        #region Public Properties

        /// <summary>Gets the client updater factory.</summary>
        /// <value>The client updater factory.</value>
        /// <autogeneratedoc />
        //public static PayaClientUpdaterFactory ClientUpdaterFactory { get; } = new PayaClientUpdaterFactory();

        /// <summary>Gets the command line parser.</summary>
        /// <value>The command line parser.</value>
        /// <autogeneratedoc />
        public static PayaCommandLineParser CommandLineParser { get; } = new PayaCommandLineParser(Environment.GetCommandLineArgs());

        /// <summary>Gets a value indicating whether this instance is restart.</summary>
        /// <value>
        /// <c>true</c> if this instance is restart; otherwise, <c>false</c>.
        /// </value>
        /// <autogeneratedoc />
        public static bool IsRestart
        {
            get { return CommandLineParser.Contains("restart"); }
        }

        /// <summary>Gets a value indicating whether this instance is startup.</summary>
        /// <value>
        /// <c>true</c> if this instance is startup; otherwise, <c>false</c>.
        /// </value>
        /// <autogeneratedoc />
        public static bool IsStartup
        {
            get { return CommandLineParser.Contains("startup"); }
        }

        /// <summary>
        /// Gets a value indicating whether this instance is update startup.
        /// </summary>
        /// <value>
        /// <c>true</c> if this instance is update startup; otherwise, <c>false</c>.
        /// </value>
        /// <autogeneratedoc />
        public static bool IsUpdateStartup
        {
            get { return CommandLineParser.Contains("d"); }
        }

        public bool IsInstallCertificate
        {
            get { return CommandLineParser.Contains("cert"); }
        }

        /// <summary>Gets the service host mode.</summary>
        /// <value>The service host mode.</value>
        /// <autogeneratedoc />
        public ServiceHostMode ServiceHostMode
        {
            get
            {
                ServiceHostMode m;
                return Enum.TryParse(Settings.Default.ServiceHostMode, out m) ? m : ServiceHostMode.Windows;
            }
        }

        #endregion

        #region Public Methods and Operators


        /// <summary>Checks for updates asynchronous.</summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        public static async Task CheckForUpdatesAsync(CancellationTokenSource cancellationTokenSource)
        {
            //if (_Logger.IsTraceEnabled)
            //    _Logger.Trace("Checking for the updates.");

            //try
            //{
            //    await ClientUpdaterFactory.TriggerAsync(cancellationTokenSource);

            //    if (_Logger.IsTraceEnabled)
            //        _Logger.Trace("Checked for the updates.");
            //}
            //catch (Exception exp)
            //{
            //    if (_Logger.IsErrorEnabled)
            //        _Logger.Error(exp, "Error while checking for update");
            //}
        }

        /// <summary>Sets the culture.</summary>
        /// <param name="culture">The culture.</param>
        /// <exception cref="System.ArgumentNullException">culture</exception>
        /// <autogeneratedoc />
        public static void SetCulture([NotNull] CultureInfo culture)
        {
            if (culture == null)
                throw new ArgumentNullException("culture");

            Contract.EndContractBlock();

            if (_Logger.IsDebugEnabled)
                _Logger.Debug("Setting the culture");

            Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture = culture;
            FrameworkElement.LanguageProperty.OverrideMetadata(typeof(FrameworkElement), new FrameworkPropertyMetadata(XmlLanguage.GetLanguage(culture.IetfLanguageTag)));

            SetDefaultCulture(culture);

            if (_Logger.IsDebugEnabled)
                _Logger.Debug("Culture set");
        }

        /// <summary>Restarts the specified force.</summary>
        /// <param name="force">if set to <c>true</c> [force].</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public async Task RestartAsync(bool force = false)
        {
            //if (_Logger.IsTraceEnabled)
            //    _Logger.Trace("Restarting.");

            //var anyWindowIsOpen = !force && this.Windows.OfType<Window>().Any(x => !ReferenceEquals(x, this.MainWindow) && x.IsVisible && x.GetType() != typeof(GlowWindow));


            //bool restartFlag;
            //if (anyWindowIsOpen)
            //{
            //    var win = new UpdateConfirmWindow { Topmost = true };
            //    UIHelper.SetTimeout(3000, () => win.Topmost = false);
            //    win.Show();
            //    win.Activate();
            //    restartFlag = await win.ShowUpdateConfirmMessageAsync();
            //    this.Dispatcher.Invoke(new Action(() => win.Close()));
            //}
            //else
            //{
            //    restartFlag = true;
            //}


            //if (restartFlag)
            //{
            //    Process.Start(new ProcessStartInfo((Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()).Location, "/d") { LoadUserProfile = true, UseShellExecute = true });
            //    this.Shutdown();
            //    UIHelper.SetTimeout(1000, () => Environment.FailFast("Restarting..."));
            //}
        }

        #endregion

        #region Methods

        /// <summary>Raises the <see cref="E:Activated" /> event.</summary>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        protected override void OnActivated(EventArgs e)
        {
            if (this.MainWindow.IsVisible && this.MainWindow.Visibility == Visibility.Visible)
                this.MainWindow.Activate();

            base.OnActivated(e);
        }

        /// <summary>
        ///     Raises the <see cref="E:System.Windows.Application.Exit" /> event.
        /// </summary>
        /// <param name="e">An <see cref="T:System.Windows.ExitEventArgs" /> that contains the event data.</param>
        protected override void OnExit(ExitEventArgs e)
        {
            _Logger.Info("خروج از برنامه");

            try
            {
                lock (_SyncObject)
                {
                    this.CloseServiceHost();
                }
            }
            catch (Exception exp)
            {
                _Logger.Warn(exp, "خطا حین خروج از برنامه");
            }

            this.DispatcherUnhandledException -= App_DispatcherUnhandledException;

            base.OnExit(e);
        }

        protected override void OnSessionEnding(SessionEndingCancelEventArgs e)
        {
            if (_Logger.IsInfoEnabled)
                _Logger.Info("Session Ending because of {0}", e.ReasonSessionEnding);

            base.OnSessionEnding(e);
        }

        /// <summary>
        ///     Raises the <see cref="E:System.Windows.Application.Startup" /> event.
        /// </summary>
        /// <param name="e">A <see cref="T:System.Windows.StartupEventArgs" /> that contains the event data.</param>
        protected override async void OnStartup(StartupEventArgs e)
        {
            if (_Logger.IsInfoEnabled)
                _Logger.Info("شروع برنامه");

            if (_Logger.IsInfoEnabled)
                _Logger.Info("IsAdministrator = {0}; Is64BitProcess = {1}; Is64BitOperatingSystem = {2}; MachineName = {3}; OSVersion = {4}; ProcessorCount = {5}; Version = {6}; SystemVersion = {7};", IsWindowsAdministrator, Environment.Is64BitProcess, Environment.Is64BitOperatingSystem, Environment.MachineName, Environment.OSVersion, Environment.ProcessorCount, Environment.Version, RuntimeEnvironment.GetSystemVersion());

            this.DispatcherUnhandledException += App_DispatcherUnhandledException;
            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;

            try
            {
                AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
            }
            catch (Exception exp)
            {
                if (_Logger.IsWarnEnabled)
                    _Logger.Warn(exp, "Error while setting the windows principal policy");
            }

            SetCulture(new PersianInvariantCulture());

            //LocalizationManager.Manager = new LocalizationManager
            //{
            //    ResourceManager = GridViewResources.ResourceManager
            //};

            //if (_Logger.IsDebugEnabled)
            //    _Logger.Trace("Setting the Palette.");

            //Windows8Palette.Palette.FontFamily = new FontFamily("Tahoma");
            //Windows8Palette.Palette.FontFamilyLight = Windows8Palette.Palette.FontFamily;
            //Windows8Palette.Palette.FontFamilyStrong = Windows8Palette.Palette.FontFamily;
            //Windows8Palette.Palette.AccentColor = (Color)this.Resources["AccentColor"];

            //StyleManager.ApplicationTheme = new Windows8Theme();

            if (_Logger.IsDebugEnabled)
                _Logger.Debug("Set the Palette.");

            base.OnStartup(e);

            if (_Logger.IsTraceEnabled)
                _Logger.Trace("Base startup done.");

            await TaskEx.WhenAll(
                                 TaskEx.Run(() => SetProgramIntoRegistryStartup()),
                                 TaskEx.Run(async () =>
                                     {
                                         if (IsUpdateStartup)
                                         {
                                             if (_Logger.IsDebugEnabled)
                                                 _Logger.Debug("Update startup delay");

                                             await TaskEx.Delay(TimeSpan.FromSeconds(5));
                                         }

                                         await TaskEx.Delay(TimeSpan.FromMilliseconds(10));

                                         if (_Logger.IsInfoEnabled)
                                             _Logger.Info("Configuring the service host.");

                                         bool isStartup = IsStartup;

                                         bool retry;
                                         do
                                         {
                                             try
                                             {
                                                 retry = false;
                                                 lock (_SyncObject)
                                                 {
                                                     this.CreateServiceHost();
                                                 }
                                             }
                                             catch (Exception exp)
                                             {
                                                 const string msg = "تلاش برای میزبانی سرویس پایا موفق نبود";
                                                 _Logger.Error(exp, msg);

                                                 if (isStartup || MessageBox.Show(msg + Environment.NewLine + "دوباره سعی شود؟?", exp.GetType().Name, MessageBoxButton.YesNo, MessageBoxImage.Warning, MessageBoxResult.No, MessageBoxOptions.ServiceNotification) == MessageBoxResult.No)
                                                 {
                                                     this.Dispatcher.BeginInvoke(new Action(this.Shutdown), DispatcherPriority.Send);
                                                     return;
                                                 }

                                                 retry = true;
                                             }
                                         }
                                         while (retry);
                                     }));
        }

        /// <summary>
        ///     Handles the DispatcherUnhandledException event of the App control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="DispatcherUnhandledExceptionEventArgs" /> instance containing the event data.</param>
        private static void App_DispatcherUnhandledException(object sender, [NotNull] DispatcherUnhandledExceptionEventArgs e)
        {
            if (_Logger.IsErrorEnabled)
                _Logger.Error(e.Exception, "DispatcherUnhandledException");
            e.Handled = true;
        }

        private static void CloseServiceHost([CanBeNull] ServiceHostBase host)
        {
            if (host == null)
                return;

            host.Faulted -= ServiceHost_Faulted;
            host.UnknownMessageReceived -= ServiceHost_UnknownMessageReceived;

            if (host.State == CommunicationState.Opened)
            {
                host.Close();

                _Logger.Info("سرویس پایا بسته شد");
            }
        }

        private static void CreateServiceHost<T>([NotNull] ref T host, [NotNull] Func<T> create)
            where T : ServiceHost
        {
            Debug.Assert(create != null);

            if (_Logger.IsInfoEnabled)
                _Logger.Info("ایجاد سرویس پایا");

            var sw = Stopwatch.StartNew();

            CloseServiceHost(host);
            host = create();
            Debug.Assert(host != null);

            var httpBinding = new WebHttpBinding
            {
                AllowCookies = true,
                CrossDomainScriptAccessEnabled = true,
                MaxReceivedMessageSize = int.MaxValue,
                MaxBufferPoolSize = int.MaxValue,
                MaxBufferSize = int.MaxValue,
                ReaderQuotas =
                              {
                                  MaxArrayLength = int.MaxValue,
                                  MaxBytesPerRead = int.MaxValue,
                                  MaxStringContentLength = int.MaxValue,
                                  MaxDepth = 16,
                                  MaxNameTableCharCount = int.MaxValue
                              },
                TransferMode = TransferMode.Streamed
            };
            //var httpsBinding = new WebHttpBinding
            //{
            //    AllowCookies = true,
            //    CrossDomainScriptAccessEnabled = true,
            //    MaxReceivedMessageSize = int.MaxValue,
            //    MaxBufferPoolSize = int.MaxValue,
            //    MaxBufferSize = int.MaxValue,
            //    ReaderQuotas =
            //                  {
            //                      MaxArrayLength = int.MaxValue,
            //                      MaxBytesPerRead = int.MaxValue,
            //                      MaxStringContentLength = int.MaxValue,
            //                      MaxDepth = 16,
            //                      MaxNameTableCharCount = int.MaxValue
            //                  },
            //    TransferMode = TransferMode.Streamed,
            //    Security = new WebHttpSecurity
            //    {
            //        Mode = WebHttpSecurityMode.Transport,
            //        Transport = new HttpTransportSecurity
            //        {
            //            ClientCredentialType = HttpClientCredentialType.None
            //        }
            //    }
            //};

            var behavior = new WebHttpBehavior
            {
                DefaultBodyStyle = WebMessageBodyStyle.Wrapped,
                DefaultOutgoingRequestFormat = WebMessageFormat.Json,
                DefaultOutgoingResponseFormat = WebMessageFormat.Json,
                HelpEnabled = false,
                FaultExceptionEnabled = true,
                AutomaticFormatSelectionEnabled = true
            };

            var httpEndpoint = host.AddServiceEndpoint(typeof(IPolicyRetriever), httpBinding, "");
            httpEndpoint.Behaviors.Add(behavior);

            //var httpsEndpoint = host.AddServiceEndpoint(typeof(IPolicyRetriever), httpsBinding, "https://localhost:59998");
            //httpsEndpoint.Behaviors.Add(behavior);

            host.Faulted += ServiceHost_Faulted;
            host.UnknownMessageReceived += ServiceHost_UnknownMessageReceived;

            var seviceDebugBehavior = host.Description.Behaviors.Find<ServiceDebugBehavior>();
            seviceDebugBehavior.HttpHelpPageEnabled = false;

            //host.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.UseWindowsGroups;
            //host.Credentials.WindowsAuthentication.IncludeWindowsGroups = true;

            if (_Logger.IsDebugEnabled)
                _Logger.Debug("Opening the host");

            host.Open();

            sw.Stop();

            if (_Logger.IsInfoEnabled)
                _Logger.Info("سرویس پایا طی {0} ثانیه ایجاد گردید", sw.Elapsed.TotalSeconds);
        }

        private static void CurrentDomain_UnhandledException(object sender, [NotNull] UnhandledExceptionEventArgs e)
        {
            var exp = e.ExceptionObject as Exception;
            if (exp != null)
            {
                if (_Logger.IsFatalEnabled)
                    _Logger.Fatal(exp, "AppDomain_UnhandledException");
            }
        }

        /// <summary>
        ///     Handles the Faulted event of the serviceHost control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        private static void ServiceHost_Faulted(object sender, EventArgs e)
        {
            if (_Logger.IsFatalEnabled)
                _Logger.Fatal("سرویس پایا با مشکل مواجه شد");
        }

        /// <summary>
        /// Handles the UnknownMessageReceived event of the serviceHost control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="UnknownMessageReceivedEventArgs" /> instance containing the event data.</param>
        /// <autogeneratedoc />
        private static void ServiceHost_UnknownMessageReceived(object sender, UnknownMessageReceivedEventArgs e)
        {
            if (_Logger.IsWarnEnabled)
                _Logger.Warn("دریافت پیام ناشناخته: {0}", e.Message);
        }

        private static void SetDefaultCulture(CultureInfo culture)
        {
            Type type = typeof(CultureInfo);


            foreach (var fieldName in new[] { "s_userDefaultCulture", "s_userDefaultUICulture", "m_userDefaultCulture", "m_userDefaultUICulture" })
            {
                try
                {
                    var field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance);
                    if (field != null)
                        field.SetValue(null, culture);
                }
                catch (Exception exp)
                {
                    if (_Logger.IsWarnEnabled)
                        _Logger.Warn(exp, "Error while setting default culture of {0} to {1}", fieldName, culture);
                }
            }
        }

        /// <summary>
        ///     Sets the program into <c>Registry</c> startup.
        /// </summary>
        private static void SetProgramIntoRegistryStartup()
        {
            const string regpath = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";

            const string regKey = "Paya Automation Editor";

            if (_Logger.IsTraceEnabled)
                _Logger.Trace("Setting Program Into Registry Startup.");

            try
            {
                using (var key = Registry.CurrentUser.OpenSubKey(regpath, true))
                {
                    if (key != null)
                    {
                        key.SetValue(regKey, (Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly()).Location + " /startup");
                        key.Close();
                    }
                }
            }
            catch (Exception exp)
            {
                if (_Logger.IsWarnEnabled)
                    _Logger.Warn(exp, "خطا حین ثبت برنامه برای شروع خودکار");
            }

            if (IsWindowsAdministrator)
            {
                try
                {
                    using (var localMachineKey = Registry.LocalMachine.OpenSubKey(regpath, true))
                    {
                        if (localMachineKey != null)
                        {
                            localMachineKey.DeleteValue(regKey);
                        }
                    }
                }
                catch (Exception exp)
                {
                    if (_Logger.IsWarnEnabled)
                        _Logger.Warn(exp, "Error while deleting legacy local-machine registry key.");
                }
            }

            if (_Logger.IsTraceEnabled)
                _Logger.Trace("Set Program Into Registry Startup.");
        }

        /// <summary>
        ///     Closes the service host.
        /// </summary>
        private void CloseServiceHost()
        {
            CloseServiceHost(this._serviceHost);
            CloseServiceHost(this._webServiceHost);
        }

        /// <summary>
        ///     Creates the service host.
        /// </summary>
        private void CreateServiceHost()
        {
            switch (this.ServiceHostMode)
            {
                case ServiceHostMode.Windows:
                    CreateServiceHost(ref this._serviceHost, () => new ServiceHost(typeof(PayaService)));
                    break;

                case ServiceHostMode.Web:
                    CreateServiceHost(ref this._webServiceHost, () => new WebServiceHost(typeof(PayaService)));
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private static bool IsWindowsAdministrator
        {
            get
            {
                try
                {
                    using (WindowsIdentity identity = WindowsIdentity.GetCurrent())
                    {
                        WindowsPrincipal principal = new WindowsPrincipal(identity);
                        return principal.IsInRole(WindowsBuiltInRole.Administrator);
                    }
                }
                catch (Exception exp)
                {
                    if (_Logger.IsWarnEnabled)
                        _Logger.Warn(exp, "Error while determining IsWindowsAdministrator");

                    return false;
                }
            }
        }

        #endregion
    }
}
